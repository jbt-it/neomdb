{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"MemberPartial": {
				"properties": {
					"lastchange": {
						"type": "string"
					},
					"ressort": {
						"type": "string"
					},
					"mitgliedstatus": {
						"type": "string"
					},
					"jbt_email": {
						"type": "string"
					},
					"handy": {
						"type": "number",
						"format": "double"
					},
					"nachname": {
						"type": "string"
					},
					"vorname": {
						"type": "string"
					}
				},
				"required": [
					"lastchange",
					"ressort",
					"mitgliedstatus",
					"jbt_email",
					"handy",
					"nachname",
					"vorname"
				],
				"type": "object",
				"description": "Type of the partial member"
			},
			"Permission": {
				"properties": {
					"directorID": {
						"type": "number",
						"format": "double"
					},
					"canDelegate": {
						"type": "boolean"
					},
					"permissionID": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"canDelegate",
					"permissionID"
				],
				"type": "object",
				"description": "Type of the permission"
			},
			"JWTPayload": {
				"properties": {
					"roles": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/Permission"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"mitgliedID": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"roles",
					"permissions",
					"name",
					"mitgliedID"
				],
				"type": "object",
				"description": "Type of the payload if the jason web token"
			},
			"UserLoginRequest": {
				"properties": {
					"password": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				},
				"required": [
					"password",
					"username"
				],
				"type": "object",
				"description": "Type for the request to login a user"
			},
			"UserChangePasswordRequest": {
				"properties": {
					"newPassword": {
						"type": "string"
					},
					"oldPassword": {
						"type": "string"
					},
					"userName": {
						"type": "string"
					},
					"userID": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"newPassword",
					"oldPassword",
					"userName",
					"userID"
				],
				"type": "object",
				"description": "Type of the request to change the password of a user"
			},
			"UserForgotPasswordRequest": {
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"description": "Type of the request to send a password reset link to a user"
			},
			"UserResetPasswordRequest": {
				"properties": {
					"newPassword": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"newPassword",
					"key",
					"email"
				],
				"type": "object",
				"description": "Type of the request to reset the password of a user"
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "server",
		"version": "0.1.0",
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/members": {
			"get": {
				"operationId": "GetMembers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/MemberPartial"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get a list of all members",
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/auth/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JWTPayload"
								}
							}
						}
					}
				},
				"description": "Sends an httpOnly cookie to the client and retrieves id, username and corresponding permissions",
				"summary": "Logs in a user",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserLoginRequest"
							},
							"example": {
								"username": "w.luft",
								"password": "s3cre7"
							}
						}
					}
				}
			}
		},
		"/auth/me": {
			"get": {
				"operationId": "GetUserData",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JWTPayload"
								}
							}
						}
					}
				},
				"description": "Sends the user data of the currently logged in user to the client",
				"summary": "Retrieves own user data",
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/auth/change-password": {
			"patch": {
				"operationId": "ChangePassword",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Updates the passwordHash in the database if the old password is correct",
				"summary": "Changes the users password",
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserChangePasswordRequest"
							},
							"example": {
								"userName": "w.luft",
								"oldPassword": "s3cre7",
								"newPassword": "s3cre7",
								"userID": 8167
							}
						}
					}
				}
			}
		},
		"/auth/forgot-password": {
			"post": {
				"operationId": "SendPasswordResetLink",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "An email is sent with an password reset link and a key in the url to the user\nThe key used in the link is saved in the databse for the later verification",
				"summary": "Sends a password reset link to the user",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserForgotPasswordRequest"
							},
							"example": {
								"email": "w.luft@studentische-beratung.de"
							}
						}
					}
				}
			}
		},
		"/auth/reset-forgot-password": {
			"patch": {
				"operationId": "ResetPasswordWithKey",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "The user can set a new password by entering their mailadress and a new password\nThe mail and the key in the url are then checked to se if it is a valid pair\nIf the pair is valid the new password is stored",
				"summary": "Resets the password of a user",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserResetPasswordRequest"
							},
							"example": {
								"email": "w.luft@studentische-beratung.de",
								"key": "1234567890",
								"newPassword": "s3cre7"
							}
						}
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"operationId": "Logout",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Loggs the user out by removing the jwt from the cookie",
				"summary": "Logs out the user",
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}